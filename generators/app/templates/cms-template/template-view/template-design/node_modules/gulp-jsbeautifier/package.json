{
  "name": "gulp-jsbeautifier",
  "description": "jsbeautifier.org for Gulp",
  "version": "0.0.8",
  "homepage": "https://github.com/tarunc/gulp-jsbeautifier",
  "author": {
    "name": "Tarun Chaudhry",
    "url": "https://github.com/tarunc"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tarunc/gulp-jsbeautifier.git"
  },
  "bugs": {
    "url": "https://github.com/tarunc/gulp-jsbeautifier/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/tarunc/gulp-jsbeautifier/blob/master/LICENSE.md"
    }
  ],
  "main": "index.js",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "mocha",
    "coverage": "jscoverage index.js index-cov.js; COVERAGE=1 mocha --reporter mocha-lcov-reporter | ./node_modules/coveralls/bin/coveralls.js"
  },
  "dependencies": {
    "ansidiff": "^1.0.0",
    "event-stream": "^3.3.0",
    "gulp-util": "^3.0.4",
    "js-beautify": "^1.5.1",
    "lodash": "^3.5.0",
    "underscore.string": "^3.0.3"
  },
  "devDependencies": {
    "blanket": "^1.1.6",
    "chai": "^2.1.2",
    "coveralls": "^2.11.2",
    "gulp": "^3.8.11",
    "jscoverage": "^0.5.9",
    "mocha": "^2.2.1",
    "mocha-lcov-reporter": "0.0.1"
  },
  "keywords": [
    "beautify",
    "format",
    "gulp",
    "js-beautify",
    "gulpplugin",
    "html beautify",
    "html format",
    "html indent",
    "html prettify",
    "prettify",
    "beautifier",
    "jsbeautifier",
    "code-quality",
    "javascript beautify",
    "css beautify",
    "json beautify"
  ],
  "config": {
    "blanket": {
      "pattern": "gulp-jsbeautifier/index.js"
    }
  },
  "readme": "# gulp-jsbeautifier\n[![Build Status](https://travis-ci.org/tarunc/gulp-jsbeautifier.png?branch=master)](https://travis-ci.org/tarunc/gulp-jsbeautifier)\n[![NPM version](https://badge.fury.io/js/gulp-jsbeautifier.png)](http://badge.fury.io/js/gulp-jsbeautifier)\n[![Coverage Status](https://coveralls.io/repos/tarunc/gulp-jsbeautifier/badge.png)](https://coveralls.io/r/tarunc/gulp-jsbeautifier)\n[![Code Climate](https://codeclimate.com/github/tarunc/gulp-jsbeautifier.png)](https://codeclimate.com/github/tarunc/gulp-jsbeautifier)\n[![Dependencies](https://david-dm.org/tarunc/gulp-jsbeautifier.png)](https://david-dm.org/tarunc/gulp-jsbeautifier)\n[![devDependency Status](https://david-dm.org/tarunc/gulp-jsbeautifier/dev-status.png)](https://david-dm.org/tarunc/gulp-jsbeautifier#info=devDependencies)\n\n> Prettify JavaScript, HTML, CSS, and JSON.\n\n[jsbeautifier.org](http://jsbeautifier.org/) for gulp\n\n## Getting Started\nInstall the module with: `npm install --save-dev gulp-jsbeautifier`\n\n## Usage\n\n```js\nvar gulp = require('gulp');\nvar prettify = require('gulp-jsbeautifier');\n\ngulp.task('git-pre-js', function() {\n  gulp.src('./src/foo.js', './src/bar.json')\n    .pipe(prettify({config: '.jsbeautifyrc', mode: 'VERIFY_ONLY'}))\n});\n\ngulp.task('format-js', function() {\n  gulp.src('./src/foo.js', './src/bar.json')\n    .pipe(prettify({config: '.jsbeautifyrc', mode: 'VERIFY_AND_WRITE'}))\n    .pipe(gulp.dest('./dist'))\n});\n\ngulp.task('prettify-html', function() {\n  gulp.src('./src/foo.html')\n    .pipe(prettify({indentSize: 2}))\n    .pipe(gulp.dest('./dist'))\n});\n\ngulp.task('prettify-css', function() {\n  gulp.src('./src/foo.css')\n    .pipe(prettify({indentSize: 2}))\n    .pipe(gulp.dest('./dist'))\n});\n```\nOther examples are in the [example folder.](http://github.com/tarunc/gulp-jsbeautifier/tree/master/examples)\n\nSee the [js-beautify docs](https://github.com/einars/js-beautify) for options.\n\n## Config\n#### options.mode (optional)\nType: `String`\nDefault value: `VERIFY_AND_WRITE`\n\nIf mode is \"VERIFY_ONLY\", then task will fail if at least one file can be beautified. This is useful for pre-commit check.\nIf a filename is specified, options and globals defined therein will be used. The `jsbeautifyrc` file must be valid JSON and looks like the one supported by js-beautify itself.\n\n#### options.logSuccess (optional)\nType: `Boolean`\nDefault value: `true`\n\nConfigures whether to log on success or not. When this is set to `true`, this will print `Beautifying filename.js` for each file. When set to false, it will not print this when it is successful in beautiying the file. This is helpful for debugging purposes. If you are having difficulties, try setting this to `true`.\n\n#### options.config (optional)\nType: `String`\nDefault value: `null`\n\nIf a filename is specified, options and globals defined therein will be used. The `jsbeautifyrc` file must be valid JSON and looks like the one supported by js-beautify itself.\n\n### Default options from [js-beautify](https://github.com/einars/js-beautify#options) can be used\n```javascript\n.pipe(prettify({\n    config: \"path/to/.jsbeautifyrc\",\n    html: {\n        braceStyle: \"collapse\",\n        indentChar: \" \",\n        indentScripts: \"keep\",\n        indentSize: 4,\n        maxPreserveNewlines: 10,\n        preserveNewlines: true,\n        unformatted: [\"a\", \"sub\", \"sup\", \"b\", \"i\", \"u\"],\n        wrapLineLength: 0\n    },\n    css: {\n        indentChar: \" \",\n        indentSize: 4\n    },\n    js: {\n        braceStyle: \"collapse\",\n        breakChainedMethods: false,\n        e4x: false,\n        evalCode: false,\n        indentChar: \" \",\n        indentLevel: 0,\n        indentSize: 4,\n        indentWithTabs: false,\n        jslintHappy: false,\n        keepArrayIndentation: false,\n        keepFunctionIndentation: false,\n        maxPreserveNewlines: 10,\n        preserveNewlines: true,\n        spaceBeforeConditional: true,\n        spaceInParen: false,\n        unescapeStrings: false,\n        wrapLineLength: 0\n    }\n));\n```\nOnly specifiy options to overwrite.\n\n**NOTE:** All options can be specified similar to [js-beautify](https://github.com/einars/js-beautify#options) using underscore.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2015 Tarun Chaudhry &lt;tarunc92@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "gulp-jsbeautifier@0.0.8",
  "dist": {
    "shasum": "99aaca365d55de960456013ef2f1774eaf647707"
  },
  "_from": "gulp-jsbeautifier@~0.0.4",
  "_resolved": "https://registry.npmjs.org/gulp-jsbeautifier/-/gulp-jsbeautifier-0.0.8.tgz"
}
